!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module openmodes_core ! in 
    interface  ! in :openmodes_core
        function scr_index(row,col,indices,indptr) ! in :openmodes_core:src/rwg.f90
            integer intent(in) :: row
            integer intent(in) :: col
            integer dimension(1),intent(in) :: indices
            integer dimension(1),intent(in) :: indptr
            integer :: scr_index
        end function scr_index
        subroutine face_integrals_complex(n_s,xi_eta_s,weights_s,nodes_s_in,n_o,xi_eta_o,weights_o,nodes_o_in,jk_0,i_a,i_phi) ! in :openmodes_core:src/rwg.f90
            use core_for
            integer, optional,intent(in),check(shape(xi_eta_s,0)==n_s),depend(xi_eta_s) :: n_s=shape(xi_eta_s,0)
            real(kind=wp) dimension(n_s,2),intent(in) :: xi_eta_s
            real(kind=wp) dimension(n_s),intent(in),depend(n_s) :: weights_s
            real(kind=wp) dimension(3,3),intent(in) :: nodes_s_in
            integer, optional,intent(in),check(shape(xi_eta_o,0)==n_o),depend(xi_eta_o) :: n_o=shape(xi_eta_o,0)
            real(kind=wp) dimension(n_o,2),intent(in) :: xi_eta_o
            real(kind=wp) dimension(n_o),intent(in),depend(n_o) :: weights_o
            real(kind=wp) dimension(3,3),intent(in) :: nodes_o_in
            complex(kind=wp) intent(in) :: jk_0
            complex(kind=wp) dimension(3,3),intent(out) :: i_a
            complex(kind=wp) intent(out) :: i_phi
        end subroutine face_integrals_complex
        subroutine arcioni_singular(nodes,i_a,i_phi) ! in :openmodes_core:src/rwg.f90
            use vectors
            use constants
            real(kind=wp) dimension(3,3),intent(in) :: nodes
            real(kind=wp) dimension(3,3),intent(out) :: i_a
            real(kind=wp) intent(out) :: i_phi
        end subroutine arcioni_singular
        subroutine face_integrals_smooth_complex(n_s,n_s2,xi_eta_s,weights_s,nodes_s,n_o,xi_eta_o,weights_o,nodes_o,jk_0,i_a,i_phi) ! in :openmodes_core:src/rwg.f90
            use constants
            integer, optional,intent(in),check(shape(xi_eta_s,1)==n_s),depend(xi_eta_s) :: n_s=shape(xi_eta_s,1)
            integer, optional,intent(in),check(shape(xi_eta_s,0)==n_s2),depend(xi_eta_s) :: n_s2=shape(xi_eta_s,0)
            real(kind=wp) dimension(n_s2,n_s,2),intent(in) :: xi_eta_s
            real(kind=wp) dimension(n_s2,n_s),intent(in),depend(n_s2,n_s) :: weights_s
            real(kind=wp) dimension(3,3),intent(in) :: nodes_s
            integer, optional,intent(in),check(shape(xi_eta_o,0)==n_o),depend(xi_eta_o) :: n_o=shape(xi_eta_o,0)
            real(kind=wp) dimension(n_o,2),intent(in) :: xi_eta_o
            real(kind=wp) dimension(n_o),intent(in),depend(n_o) :: weights_o
            real(kind=wp) dimension(3,3),intent(in) :: nodes_o
            complex(kind=wp) intent(in) :: jk_0
            complex(kind=wp) dimension(3,3),intent(out) :: i_a
            complex(kind=wp) intent(out) :: i_phi
        end subroutine face_integrals_smooth_complex
        subroutine z_efie_faces_self(num_nodes,num_triangles,num_integration,num_singular,nodes,triangle_nodes,s,xi_eta_eval,weights,phi_precalc,a_precalc,indices_precalc,indptr_precalc,a_face,phi_face) ! in :openmodes_core:src/rwg.f90
            use core_for
            integer, optional,intent(in),check(shape(nodes,0)==num_nodes),depend(nodes) :: num_nodes=shape(nodes,0)
            integer, optional,intent(in),check(shape(triangle_nodes,0)==num_triangles),depend(triangle_nodes) :: num_triangles=shape(triangle_nodes,0)
            integer, optional,intent(in),check(shape(xi_eta_eval,0)==num_integration),depend(xi_eta_eval) :: num_integration=shape(xi_eta_eval,0)
            integer, optional,intent(in),check(len(phi_precalc)>=num_singular),depend(phi_precalc) :: num_singular=len(phi_precalc)
            real(kind=wp) dimension(num_nodes,3),intent(in) :: nodes
            integer dimension(num_triangles,3),intent(in) :: triangle_nodes
            complex(kind=wp) intent(in) :: s
            real(kind=wp) dimension(num_integration,2),intent(in) :: xi_eta_eval
            real(kind=wp) dimension(num_integration),intent(in),depend(num_integration) :: weights
            real(kind=wp) dimension(num_singular),intent(in) :: phi_precalc
            real(kind=wp) dimension(num_singular,3,3),intent(in),depend(num_singular) :: a_precalc
            integer dimension(num_singular),intent(in),depend(num_singular) :: indices_precalc
            integer dimension(num_triangles + 1),intent(in),depend(num_triangles) :: indptr_precalc
            complex(kind=wp) dimension(num_triangles,3,num_triangles,3),intent(out),depend(num_triangles,num_triangles) :: a_face
            complex(kind=wp) dimension(num_triangles,num_triangles),intent(out),depend(num_triangles,num_triangles) :: phi_face
        end subroutine z_efie_faces_self
        subroutine voltage_plane_wave(num_nodes,num_triangles,num_basis,num_integration,nodes,triangle_nodes,basis_tri_p,basis_tri_m,basis_node_p,basis_node_m,xi_eta_eval,weights,e_inc,jk_inc,v) ! in :openmodes_core:src/rwg.f90
            use core_for
            integer, optional,intent(in),check(shape(nodes,0)==num_nodes),depend(nodes) :: num_nodes=shape(nodes,0)
            integer, optional,intent(in),check(shape(triangle_nodes,0)==num_triangles),depend(triangle_nodes) :: num_triangles=shape(triangle_nodes,0)
            integer, optional,intent(in),check(len(basis_tri_p)>=num_basis),depend(basis_tri_p) :: num_basis=len(basis_tri_p)
            integer, optional,intent(in),check(shape(xi_eta_eval,0)==num_integration),depend(xi_eta_eval) :: num_integration=shape(xi_eta_eval,0)
            real(kind=wp) dimension(num_nodes,3),intent(in) :: nodes
            integer dimension(num_triangles,3),intent(in) :: triangle_nodes
            integer dimension(num_basis),intent(in) :: basis_tri_p
            integer dimension(num_basis),intent(in),depend(num_basis) :: basis_tri_m
            integer dimension(num_basis),intent(in),depend(num_basis) :: basis_node_p
            integer dimension(num_basis),intent(in),depend(num_basis) :: basis_node_m
            real(kind=wp) dimension(num_integration,2),intent(in) :: xi_eta_eval
            real(kind=wp) dimension(num_integration),intent(in),depend(num_integration) :: weights
            complex(kind=wp) dimension(3),intent(in) :: e_inc
            complex(kind=wp) dimension(3),intent(in) :: jk_inc
            complex(kind=wp) dimension(num_basis),intent(out),depend(num_basis) :: v
        end subroutine voltage_plane_wave
        subroutine v_efie_faces_plane_wave(num_nodes,num_triangles,num_integration,nodes,triangle_nodes,xi_eta_eval,weights,e_inc,jk_inc,v_faces) ! in :openmodes_core:src/rwg.f90
            use core_for
            integer, optional,intent(in),check(shape(nodes,0)==num_nodes),depend(nodes) :: num_nodes=shape(nodes,0)
            integer, optional,intent(in),check(shape(triangle_nodes,0)==num_triangles),depend(triangle_nodes) :: num_triangles=shape(triangle_nodes,0)
            integer, optional,intent(in),check(shape(xi_eta_eval,0)==num_integration),depend(xi_eta_eval) :: num_integration=shape(xi_eta_eval,0)
            real(kind=wp) dimension(num_nodes,3),intent(in) :: nodes
            integer dimension(num_triangles,3),intent(in) :: triangle_nodes
            real(kind=wp) dimension(num_integration,2),intent(in) :: xi_eta_eval
            real(kind=wp) dimension(num_integration),intent(in),depend(num_integration) :: weights
            complex(kind=wp) dimension(3),intent(in) :: e_inc
            complex(kind=wp) dimension(3),intent(in) :: jk_inc
            complex(kind=wp) dimension(num_triangles,3),intent(out),depend(num_triangles) :: v_faces
        end subroutine v_efie_faces_plane_wave
        subroutine face_integrals_hanninen(nodes_s,n_o,xi_eta_o,weights_o,nodes_o,i_a,i_phi) ! in :openmodes_core:src/rwg.f90
            use vectors
            use constants
            real(kind=wp) dimension(3,3),intent(in) :: nodes_s
            integer, optional,intent(in),check(shape(xi_eta_o,0)==n_o),depend(xi_eta_o) :: n_o=shape(xi_eta_o,0)
            real(kind=wp) dimension(n_o,2),intent(in) :: xi_eta_o
            real(kind=wp) dimension(n_o),intent(in),depend(n_o) :: weights_o
            real(kind=wp) dimension(3,3),intent(in) :: nodes_o
            real(kind=wp) dimension(3,3),intent(out) :: i_a
            real(kind=wp) intent(out) :: i_phi
        end subroutine face_integrals_hanninen
        subroutine triangle_face_to_rwg(num_triangles,num_basis,basis_tri_p,basis_tri_m,basis_node_p,basis_node_m,vector_face,scalar_face,vector_rwg,scalar_rwg) ! in :openmodes_core:src/rwg.f90
            use core_for
            integer, optional,intent(in),check(shape(vector_face,0)==num_triangles),depend(vector_face) :: num_triangles=shape(vector_face,0)
            integer, optional,intent(in),check(len(basis_tri_p)>=num_basis),depend(basis_tri_p) :: num_basis=len(basis_tri_p)
            integer dimension(num_basis),intent(in) :: basis_tri_p
            integer dimension(num_basis),intent(in),depend(num_basis) :: basis_tri_m
            integer dimension(num_basis),intent(in),depend(num_basis) :: basis_node_p
            integer dimension(num_basis),intent(in),depend(num_basis) :: basis_node_m
            complex(kind=wp) dimension(num_triangles,num_triangles,3,3),intent(in) :: vector_face
            complex(kind=wp) dimension(num_triangles,num_triangles),intent(in),depend(num_triangles,num_triangles) :: scalar_face
            complex(kind=wp) dimension(num_basis,num_basis),intent(out),depend(num_basis,num_basis) :: vector_rwg
            complex(kind=wp) dimension(num_basis,num_basis),intent(out),depend(num_basis,num_basis) :: scalar_rwg
        end subroutine triangle_face_to_rwg
        subroutine set_threads(n) ! in :openmodes_core:src/common.f90
            use omp_lib
            integer intent(in) :: n
        end subroutine set_threads
        subroutine get_threads(n) ! in :openmodes_core:src/common.f90
            use omp_lib
            integer intent(out) :: n
        end subroutine get_threads
    end interface 
end python module openmodes_core

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
