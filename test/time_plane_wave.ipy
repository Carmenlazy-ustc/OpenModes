
import openmodes
from openmodes.constants import c
from openmodes.basis import DivRwgBasis

import openmodes_core
import core_cython

import numpy as np
import os.path as osp
import matplotlib.pyplot as plt



filename = osp.join(openmodes.geometry_dir, "SRR.geo")

mesh_tol = 0.01e-3
mesh = openmodes.load_mesh(filename, mesh_tol)

sim = openmodes.Simulation()    
sim.place_part(mesh)


e_inc = np.array([1, 0, 0], dtype=np.complex128)
k_hat = np.array([0, 0, 1], dtype=np.complex128)

s = 2j*np.pi*1e9
jk_inc = s/c*k_hat
   
xi_eta_eval, weights = sim.quadrature_rule
nodes = np.array(mesh.nodes, np.float64)
tri = mesh.triangle_nodes
basis = DivRwgBasis(mesh)
    
print "fortran"
%timeit openmodes_core.voltage_plane_wave(nodes, tri, basis.rwg.tri_p, basis.rwg.tri_m, basis.rwg.node_p, basis.rwg.node_m, xi_eta_eval, weights, e_inc, jk_inc)

xi_eta_eval =np.ascontiguousarray(xi_eta_eval)
nodes = np.ascontiguousarray(nodes)
tri = np.ascontiguousarray(tri)

print "cython (serial)"
%timeit core_cython.voltage_plane_wave_serial(nodes, tri, basis.rwg.tri_p, basis.rwg.tri_m, basis.rwg.node_p, basis.rwg.node_m, xi_eta_eval, weights[0], e_inc, jk_inc)

print "cython (parallel)"
%timeit core_cython.voltage_plane_wave_parallel(nodes, tri, basis.rwg.tri_p, basis.rwg.tri_m, basis.rwg.node_p, basis.rwg.node_m, xi_eta_eval, weights[0], e_inc, jk_inc)


#incident = openmodes_core.voltage_plane_wave(nodes, tri, basis.rwg.tri_p, basis.rwg.tri_m, basis.rwg.node_p, basis.rwg.node_m, xi_eta_eval, weights, e_inc, jk_inc)
#incident2 = core_cython.voltage_plane_wave(nodes, tri, basis.rwg.tri_p, basis.rwg.tri_m, basis.rwg.node_p, basis.rwg.node_m, xi_eta_eval, weights[0], e_inc, jk_inc)
#
#plt.figure()
#plt.plot(incident.real)
#plt.plot(incident.imag)
#plt.plot(incident2.real, '--')
#plt.plot(incident2.imag, '--')
#plt.show()